[{"C:\\Users\\lital\\Documents\\react projects\\ball-sort-game\\src\\index.js":"1","C:\\Users\\lital\\Documents\\react projects\\ball-sort-game\\src\\App.js":"2","C:\\Users\\lital\\Documents\\react projects\\ball-sort-game\\src\\reportWebVitals.js":"3","C:\\Users\\lital\\Documents\\react projects\\ball-sort-game\\src\\components\\Selection\\Selection.js":"4","C:\\Users\\lital\\Documents\\react projects\\ball-sort-game\\src\\components\\Board\\Board.js":"5","C:\\Users\\lital\\Documents\\react projects\\ball-sort-game\\src\\components\\Tube\\Tube.js":"6","C:\\Users\\lital\\Documents\\react projects\\ball-sort-game\\src\\components\\Ball\\Ball.js":"7","C:\\Users\\lital\\Documents\\react projects\\ball-sort-game\\src\\components\\context\\store.js":"8","C:\\Users\\lital\\Documents\\react projects\\ball-sort-game\\src\\components\\Instructions\\Instructions.js":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":1127,"mtime":1612710865884,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":935,"mtime":1613492735989,"results":"14","hashOfConfig":"11"},{"size":1858,"mtime":1613494470824,"results":"15","hashOfConfig":"11"},{"size":576,"mtime":1612273826468,"results":"16","hashOfConfig":"11"},{"size":313,"mtime":1612273847001,"results":"17","hashOfConfig":"11"},{"size":6286,"mtime":1613479641183,"results":"18","hashOfConfig":"11"},{"size":731,"mtime":1613494495067,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"m4kt0o",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\lital\\Documents\\react projects\\ball-sort-game\\src\\index.js",[],["40","41"],"C:\\Users\\lital\\Documents\\react projects\\ball-sort-game\\src\\App.js",[],"C:\\Users\\lital\\Documents\\react projects\\ball-sort-game\\src\\reportWebVitals.js",[],"C:\\Users\\lital\\Documents\\react projects\\ball-sort-game\\src\\components\\Selection\\Selection.js",[],"C:\\Users\\lital\\Documents\\react projects\\ball-sort-game\\src\\components\\Board\\Board.js",[],"C:\\Users\\lital\\Documents\\react projects\\ball-sort-game\\src\\components\\Tube\\Tube.js",[],"C:\\Users\\lital\\Documents\\react projects\\ball-sort-game\\src\\components\\Ball\\Ball.js",[],"C:\\Users\\lital\\Documents\\react projects\\ball-sort-game\\src\\components\\context\\store.js",["42"],"import React, { createContext, useState } from 'react';\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport const ballsContext = createContext();\r\n\r\nconst BallsContextProvider = (props) => {\r\n\r\n  const [initialRandomBalls, setInitialRandomBalls] =  useState();\r\n  const [randomBalls, setRandomBalls] = useState();\r\n  const [movedBall, setMovedBall] = useState(null);\r\n  const [undoCount, setUndoCount] = useState(5);\r\n  const [undoMoves, setUndoMoves] = useState([]);\r\n  const [completed, setComplited] = useState(false);\r\n\r\n\r\n  // Create array of the correct length according to users` choice\r\n  const shuffleBalls = (amount) => {\r\n    let arr = [];\r\n    for (let i = 1; i <= amount; i++) {\r\n      for (let j = 0; j < 4; j++) {\r\n        arr.push({ num: i, id: uuidv4() })\r\n      }\r\n    }\r\n    shuffle(arr);\r\n  }\r\n  // Shuffles the attay and adds two empty tubes\r\n  const shuffle = (array) => {\r\n    let emptyTubes = new Array([], []);\r\n    let shuffled = [];\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    while (array.length) {\r\n      shuffled.push(array.splice(0, 4))\r\n    }\r\n    let temp = shuffled.concat(emptyTubes);\r\n    setRandomBalls(temp);\r\n    makeRandomBallsCopy(temp)\r\n  }\r\n  \r\n  const makeRandomBallsCopy = (random) => {\r\n    setInitialRandomBalls(JSON.parse(JSON.stringify(random)));\r\n    console.log('first init', initialRandomBalls)\r\n  }\r\n\r\n \r\n  // Select a ball \r\n  const chooseBallHandler = (index) => {\r\n    let tempRandomBalls = [...randomBalls];\r\n    setMovedBall(Object.assign(tempRandomBalls[index][tempRandomBalls[index].length - 1], { index: index }));\r\n    Object.assign(tempRandomBalls[index][tempRandomBalls[index].length - 1], { class: 'chosen' });\r\n    setRandomBalls(tempRandomBalls);\r\n    console.log('added');\r\n  }\r\n\r\n  // Deselect a ball\r\n  const rmChosenBallHandler = (index) => {\r\n    let tempRandomBalls = [...randomBalls];\r\n    delete tempRandomBalls[index][tempRandomBalls[index].length - 1].class;\r\n    setRandomBalls(tempRandomBalls);\r\n    setMovedBall(null);\r\n    console.log('removed');\r\n  }\r\n\r\n  // Move ball to a different tube\r\n  const changeTubeHandler = (index) => {\r\n    let tempRandomBalls = [...randomBalls];\r\n    delete tempRandomBalls[movedBall.index][tempRandomBalls[movedBall.index].length - 1].class;\r\n    tempRandomBalls[index].push(tempRandomBalls[movedBall.index][tempRandomBalls[movedBall.index].length - 1]);\r\n    tempRandomBalls[movedBall.index].splice(tempRandomBalls[movedBall.index].length - 1, 1);\r\n    setRandomBalls(tempRandomBalls);\r\n    setMovedBall(null);\r\n    console.log('moved');\r\n    movesHistory(movedBall.index, index);\r\n    didWinHandler();\r\n  }\r\n\r\n  // Save moves for the undo\r\n  const movesHistory = (oldIndex, newIndex) => {\r\n      let tempUndoMoves = [...undoMoves];\r\n    tempUndoMoves.push({oldIndex, newIndex});\r\n    if(tempUndoMoves.length > undoCount) {\r\n      tempUndoMoves.splice(0,tempUndoMoves.length - undoCount);\r\n    }\r\n    setUndoMoves(tempUndoMoves);\r\n    console.log(undoMoves)\r\n  }\r\n\r\n  const undoHandler = () => {\r\n    if(undoMoves.length === 0) {\r\n      return\r\n    };\r\n    if (undoCount === 0){\r\n      return\r\n    } else {\r\n      setUndoCount(undoCount-1);\r\n      let tempRandomBalls = [...randomBalls];\r\n      console.log('undoMoves', undoMoves)\r\n      let undoItem = tempRandomBalls[undoMoves[undoMoves.length-1].newIndex].pop();\r\n      console.log('undoItem',undoItem);\r\n      tempRandomBalls[undoMoves[undoMoves.length-1].oldIndex].push(undoItem);\r\n      setRandomBalls(tempRandomBalls);\r\n      let tempUndoMoves = [...undoMoves];\r\n      tempUndoMoves.pop();\r\n      setUndoMoves(tempUndoMoves);\r\n      console.log(undoCount)\r\n    }\r\n  }\r\n\r\n  // Check winning condition\r\n  const didWinHandler = () => {\r\n    let didWin;\r\n    for (let i = 0; i < randomBalls.length; i++) {\r\n      if (didWin === false) {\r\n        console.log('didWin is false')\r\n        break;\r\n      };\r\n      if(randomBalls[i].length !== 0 && randomBalls[i].length < 4){console.log('less than 4', randomBalls, i); didWin = false};\r\n      \r\n      if (randomBalls[i].length > 0 && randomBalls[i].length === 4) {\r\n        for (let j = 1; j < randomBalls[i].length; j++) {\r\n          if (randomBalls[i][j].num === randomBalls[i][j - 1].num) {\r\n            didWin = true;\r\n            console.log('equal to previous')\r\n          } else {\r\n            didWin = false;\r\n            console.log('not equal to previous')\r\n            console.log('break')\r\n            break;\r\n          }\r\n        }\r\n      }\r\n      console.log(randomBalls)\r\n    }\r\n    return setComplited(didWin);\r\n  }\r\n\r\n  // Clicked ball handler\r\n  const moveBallHandler = (tube) => {\r\n    console.log(movedBall)\r\n    if (randomBalls[tube].length < 1 && movedBall === null) { return };\r\n\r\n    if (movedBall === null) {\r\n      chooseBallHandler(tube);\r\n    };\r\n\r\n    if (movedBall !== null) {\r\n      if (tube === movedBall.index) {\r\n        rmChosenBallHandler(tube);\r\n      }\r\n      else if (randomBalls[tube].length === 4) {\r\n        rmChosenBallHandler(movedBall.index);\r\n        chooseBallHandler(tube);\r\n      } else\r\n        if (randomBalls[tube].length < 1) {\r\n          changeTubeHandler(tube);\r\n        } else if (movedBall.num === randomBalls[tube][randomBalls[tube].length - 1].num && randomBalls[tube].length !== 4) {\r\n          changeTubeHandler(tube);\r\n        } else if (movedBall.num !== randomBalls[tube][randomBalls[tube].length - 1].num) {\r\n          rmChosenBallHandler(movedBall.index);\r\n          chooseBallHandler(tube);\r\n        };\r\n    }\r\n  }\r\n\r\n  // Start over the same game\r\n  const restartHandler = () => {\r\n    let temp = [...initialRandomBalls]\r\n    setRandomBalls(temp);\r\n    setUndoCount(5);\r\n    setUndoMoves([]);\r\n    console.log('init', initialRandomBalls, 'rand', randomBalls)\r\n  }\r\n\r\n  return (\r\n    <ballsContext.Provider value={\r\n      {\r\n        shuffleBalls,\r\n        randomBalls,\r\n        setRandomBalls,\r\n        moveBallHandler,\r\n        completed,\r\n        undoHandler,\r\n        undoCount,\r\n        initialRandomBalls,\r\n        setInitialRandomBalls,\r\n        restartHandler\r\n      }\r\n    }>\r\n      {props.children}\r\n    </ballsContext.Provider>\r\n  );\r\n}\r\n\r\nexport default BallsContextProvider;","C:\\Users\\lital\\Documents\\react projects\\ball-sort-game\\src\\components\\Instructions\\Instructions.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":28,"column":22,"nodeType":"49","messageId":"50","endLine":28,"endColumn":39},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","no-global-assign","no-unsafe-negation"]